import re
from aiogram import types
from aiogram.filters import Command
from typing import List, Optional
from utils.player_status_manager import PlayerStatusManager
import logging

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, status_manager: PlayerStatusManager):
        self.status_manager = status_manager
        self.trigger_words = [r'\b(–¥–∏–º–∞|–¥–æ—Ç–∞|–¥–æ—Ç–µ)\b']
        self.allowed_chat_types = ['group', 'supergroup']
    
    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        dp.message.register(self.handle_status_request, self.is_status_trigger)
        dp.message.register(self.handle_help, Command(commands=["help", "–ø–æ–º–æ—â—å"]))
        dp.message.register(self.handle_stats, Command(commands=["stats", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
    
    def is_status_trigger(self, message: types.Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        if message.chat.type not in self.allowed_chat_types:
            return False
        
        if not message.text:
            return False
        
        return any(re.search(pattern, message.text, re.IGNORECASE) 
                  for pattern in self.trigger_words)
    
    async def handle_status_request(self, message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞"""
        try:
            from config.cfg import STEAM_ID
            status = await self.status_manager.get_player_status(STEAM_ID)
            await message.reply(status)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞.")
    
    async def handle_help(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:**

üìä `/stats` –∏–ª–∏ `/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
‚ùì `/help` –∏–ª–∏ `/–ø–æ–º–æ—â—å` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí¨ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:**
–ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏—Ç–µ "–¥–∏–º–∞", "–¥–æ—Ç–∞" –∏–ª–∏ "–¥–æ—Ç–µ" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞.

üéÆ **–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:**
‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ Dota 2
‚Ä¢ –í—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ –∏–≥—Ä–µ
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
        """
        await message.reply(help_text, parse_mode="Markdown")
    
    async def handle_stats(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        try:
            from config.cfg import STEAM_ID
            status = await self.status_manager.get_player_status(STEAM_ID)
            
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:**

{status}

üïê **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {'–î–∞' if self.status_manager.is_currently_playing() else '–ù–µ—Ç'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.status_manager.last_known_status or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
            """
            await message.reply(stats_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.") 